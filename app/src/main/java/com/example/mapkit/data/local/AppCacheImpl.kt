package com.example.mapkit.data.local

import android.content.SharedPreferences
import com.example.mapkit.core.ktx.boolean
import com.example.mapkit.core.ktx.enum
import com.example.mapkit.core.ktx.string
import com.example.mapkit.core.ktx.stringNullable
import com.example.mapkit.core.model.AppLanguages
import com.example.mapkit.core.model.ThemeType
import com.example.mapkit.data.di.AppCacheQualifier
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class AppCacheImpl @Inject constructor(
    @AppCacheQualifier private val prefs: SharedPreferences,
) : AppCache {

    override var accessToken: String? by prefs.stringNullable()
    override var identyToken: String? by prefs.stringNullable()
    override var pubKey: String? by prefs.stringNullable()
    override var language: String by prefs.string(AppLanguages.UZBEK.value)
    override var refreshToken: String? by prefs.stringNullable()
    override var mfo: String? by prefs.stringNullable("")
    override var myIdCode: String? by prefs.stringNullable("")
    override var businessId: String? by prefs.stringNullable("")
    override var phone: String? by prefs.stringNullable("")
    override var serialNumber: String? by prefs.stringNullable("")
    override var companyName: String? by prefs.stringNullable("")
    override var enteredUserName: String? by prefs.stringNullable("")
    override var FCMToken: String by prefs.string()
    override var enableNotification: Boolean by prefs.boolean(true)

    override var themeType: ThemeType by prefs.enum(ThemeType.Light)

    override var hash: String? by prefs.stringNullable(
        "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"
    )

    override var isBiometricEnabled: Boolean by prefs.boolean(true)
    override var pinCode: String? by prefs.stringNullable("")
    override var isPassedPin: Boolean by prefs.boolean(false)
    override var exitTime: String by prefs.string("0")
    override var totalBalanceVisible: Boolean by prefs.boolean(true)


    override var chatToken: String by prefs.string()
    override fun requireToken(): String {
        return accessToken ?: throw IllegalStateException("Argument token must not be null")
    }

    override fun requireAuthToken(): String {
        return ""
    }

    override fun clearPreferences(): Boolean {
        return try {
            prefs.edit().clear().commit()
        } catch (e: Exception) {
            false
        }
    }
}